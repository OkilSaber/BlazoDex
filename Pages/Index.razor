@page "/"
@using System.Text.Json;
@using System.Data.Entity;
@inject HttpClient Http
@using Newtonsoft.Json;

<label for="pokemon">Pokemon</label>
<input @bind=@toSearch placeholder="ditto" name="pokemon" />
<button type="button" @onclick="GetPokemonInfosFromName">Search</button>
<div class="container">
    @if(pokemons.Count == 0) {
        <p>Loading...</p>
    }
    @foreach (JsonElement pokemon in pokemons)
    {
        <div class="card">
            <p class="card__name">@pokemon.GetProperty("name").GetString()</p>
            <p class="card__name">Male:</p>
            <img src=@pokemon.GetProperty("sprites").GetProperty("front_default").GetString() class="card__image" />
            @if (pokemon.GetProperty("sprites").GetProperty("front_female").GetString() != null)
            {
                <p class="card__name">Female:</p>
                <img src=@pokemon.GetProperty("sprites").GetProperty("front_female").GetString() class="card__image" />
            }
        </div>
    }
    @if (pokemons.Count > 1)
    {
        <button @onclick="GetAllPokemons">Show More</button>
    }
    else
    {
        <button
        @onclick="ShowAll">ShowAll</button>
    }
</div>

@code {
    private string toSearch;

    private List<JsonElement> pokemons = new List<JsonElement>();
    private string url = "https://pokeapi.co/api/v2/pokemon/";

    private async Task GetAllPokemons()
    {
        Console.WriteLine($"Url is {this.url}");
        Console.WriteLine($"Count is {this.pokemons.Count}");
        var response = await Http.GetFromJsonAsync<JsonElement>(this.url);
        this.url = response.GetProperty("next").GetString();
        for (var i = 0; i < response.GetProperty("results").GetArrayLength(); i++)
        {
            await GetPokemonInfosFromUrl(response.GetProperty("results")[i]);
        }
    }
    private async Task GetPokemonInfosFromUrl(JsonElement pokemon)
    {
        var response = await Http.GetFromJsonAsync<JsonElement>(pokemon.GetProperty("url").GetString());
        this.pokemons.Add(response);
        Console.WriteLine("A result was fetched!");
    }
    private async Task GetPokemonInfosFromName()
    {
        this.pokemons.Clear();
        var response = await Http.GetFromJsonAsync<JsonElement>($"https://pokeapi.co/api/v2/pokemon/{this.toSearch}");
        this.pokemons.Add(response);
    }
    private async Task ShowAll() {
        Console.WriteLine("Clearing list");
        this.pokemons.Clear();
        Console.WriteLine("Setting url");
        this.url = "https://pokeapi.co/api/v2/pokemon/";
        Console.WriteLine("Fetching url");
        await GetAllPokemons();
        Console.WriteLine("Resetting toSearch");
        toSearch = "";
    }
    protected override async Task OnInitializedAsync()
    {
        await GetAllPokemons();
    }
}